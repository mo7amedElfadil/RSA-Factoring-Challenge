#!/usr/bin/python3

"""This module represents the RSA challenge."""

import random
from math import isqrt as sq
from sys import argv

primes = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

def is_prime(n):
    if n < 2:
        return False
    if n == 2:
        return True
    for x in primes:
        if n % x == 0:
            if n == x:
                return True
            return False
    # for i in range(3, sq(n) + 1, 2):
    #     if n % i == 0:
    #         return False
    return True

def prime_factors_semiprime(semiprime):
    prime_factors = []
    if semiprime % 2 == 0:
        prime_factors.append(2)
        prime_factors.append(int(semiprime / 2))
        return prime_factors
    for i in primes:
        if semiprime % i == 0:
            prime_factors.append(i)
            prime_factors.append(int(semiprime / i))
            return prime_factors
    for i in range(101, sq(semiprime) + 1, 2):
        if is_prime(i) and semiprime % i == 0:
            prime_factors.append(i)
            prime_factors.append(int(semiprime / i))
            return prime_factors


def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def pollards_rho(n):
    if n < 2:
        return
    x = random.randint(2, n - 2)
    y = x
    c = random.randint(1, n - 1)
    # c= 1
    d = 1
    while d == 1:
        x = (x * x + c) % n
        y = (y * y + c) % n
        y = (y * y + c) % n
        d = gcd(abs(x - y), n)

    if (d == n) or not is_prime(d):
        return pollards_rho(d)
    return d

def factorize_semiprime(semiprime):
    factor1 = pollards_rho(semiprime)
    if not factor1:
        return None
    factor2 = semiprime // factor1
    return factor1, factor2

def check_file():
    if len(argv) != 2:
        print("factors <file>")
        exit()

def read_file_lines(f_name):
    with open(f_name, "r") as fp:
        while True:
            prime_factors = []
            line = fp.readline()
            if not line:
                break
            semiprime = int(line.strip())
            if semiprime % 2 == 0:
                prime_factors = sorted([2, semiprime // 2])
            elif semiprime < 100000000:
                prime_factors = sorted(prime_factors_semiprime(semiprime))
            else:
                prime_factors = sorted(list(factorize_semiprime(semiprime)))
            if len(prime_factors) == 2:
                print("{:d}={:d}*{:d}".format(semiprime, prime_factors[1], prime_factors[0]))
        

def read_file_all(f_name):
    with open(f_name, 'r') as fp:
        file = fp.readlien()
    file_content = sorted(list(map(int, file.splitlines())))
    for semiprime in file_content:
        if semiprime % 2 == 0:
            prime_factors = [2, semiprime // 2]  
        # elif semiprime < 10000:
        else:
            prime_factors = sorted(prime_factors_semiprime(semiprime))
        # else:
            # prime_factors = sorted(list(factorize_semiprime(semiprime)))
        if len(prime_factors) == 2:
            print("{:d}={:d}*{:d}".format(semiprime, prime_factors[1], prime_factors[0]))
    


def do_it():
    read_file_lines(argv[1])


check_file()
do_it()
